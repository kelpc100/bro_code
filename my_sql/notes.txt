sudo systemctl start mysql
sudo systemctl stop mysql
sudo systemctl status mysql

sudo systemctl enable mysql
sudo systemctl disable mysql


sudo mysql -u root -p 
sudo mysql -u tree -p


CREATE DATABASE myDB;
USE myDB;
ALTER DATABASE myDB READ ONLY = 1;


CREATE TABLE employees (
	employee_id INT PRIMARY KEY,
	first_name VARCHAR(50),
    last_name VARCHAR(50),
    pay_rate DECIMAL(5,2),
    hire_date DATE
);


RENAME TABLE employees TO workers;
ALTER TABLE employees ADD phone_num VARCAHR(15);
ALTER TABLE employees RENAME COLUMN phone_num TO email;
ALTER TABLE employees MODIFY COLUMN email VARCHAR(100);
ALTER TABLE employees MODIFY email FIRST;
ALTER TABLE employees MODIFY email AFTER last_name;
ALTER TABLE employees DROP COLUMN email;


INSERT INTO employees VALUES
    (1, "Eugene", "Krabs", 25.50, "2023-01-02"),
    (2, "Squidward", "Tentacles", 15.00, "2023-01-03"),
    (3, "Spongebob", "Squarepants", 12.50, "2023-01-04"),
    (4, "Patrick", "Star", 12.50, "2023-01-05"),
    (5, "Sandy", "Cheeks", 17.25, "2023-01-06");


INSERT INTO employees (employee_id, first_name, last_name) VALUES
    (6, "Sheldon", "Plankton");


SELECT first_name, last_name FROM employees;
SELECT * FROM employees WHERE employee_id = 1;
SELECT * FROM employees WHERE first_name = "Spongebob";
SELECT * FROM employees WHERE pay_rate >= 15;
SELECT * FROM employees WHERE hire_date <= "2023-01-03";
SELECT * FROM employees WHERE employee_id != 1;
SELECT * FROM employees WHERE hire_date IS NULL;
SELECT * FROM employees WHERE hire_date IS NOT NULL;


UPDATE employees SET pay_rate = 10.25 WHERE employee_id = 6;
UPDATE employees SET 
    pay_rate = 10.50,
    hire_date = "2023-01-07"
WHERE employee_id = 6;
UPDATE employees SET hire_date = NULL WHERE employee_id = 6;
UPDATE employees SET pay_rate = 10.25;
DELETE FROM employees WHERE employee_id = 6;


SET AUTOCOMMIT = ON;
SET AUTOCOMMIT = OFF;
COMMIT;
ROLLBACK;


CREATE TABLE test(
	my_date DATE,
    my_time TIME,
    my_datetime DATETIME
);


INSERT INTO test VALUES
    (CURRENT_DATE(), CURRENT_TIME(), NOW());
DROP TABLE test;


CREATE TABLE products (
    product_id INT,
    product_name VARCHAR(25) UNIQUE,
    price DECIMAL(5,2)
);
ALTER TABLE products ADD CONTSTRAINT UNIQUE(product_name);
INSERT INTO products VALUES
    (100, "hamburger", 3.99),
    (101, "fries", 1.89),
    (102, "soda", 1.00),
    (103, "ice cream", 1.75);


CREATE TABLE products (
    product_id INT,
    product_name VARCHAR(25) UNIQUE,
    price DECIMAL(5,2) NOT NULL
);
ALTER TABLE products MODIFY price DECIMAL(5,2) NOTNULL;


CREATE TABLE employees (
	employee_id INT PRIMARY KEY,
	first_name VARCHAR(50),
    last_name VARCHAR(50),
    pay_rate DECIMAL(5,2),
    hire_date DATE,
    CONSTRAINT chk_pay_rate CHECK (pay_rate >= 10.00)
);
ALTER TABLE employees ADD CONSTRAINT chk_pay_rate CHECK (pay_rate >= 10.00);
ALTER TABLE employees DROP CHECK chk_pay_rate;


CREATE TABLE products (
    product_id INT,
    product_name VARCHAR(25) UNIQUE,
    price DECIMAL(4,2) DEFAULT 0.00
);
ALTER TABLE products ALTER price SET DEFAULT 0.00;
INSERT INTO products (product_id, product_name) VALUES 
    (104, "straw"),
    (105, "napkin"),
    (106, "fork"),
    (107, "spoon");


CREATE TABLE transactions(
    transaction_id INT,
    amount DECIMAL (5,2),
    transaction_time DATETIME DEFAULT NOW()
);
INSERT INTO transactions (transaction_id, amount) VALUES (1, 4.99);
INSERT INTO transactions (transaction_id, amount) VALUES (2, 2.89);
INSERT INTO transactions (transaction_id, amount) VALUES (3, 8.37);


CREATE TABLE transactions(
    transaction_id INT PRIMARY KEY,
    amount DECIMAL (5,2)
);
ALTER TABLE transactions ADD CONTRSTAINT PRIMARY KEY(transaction_id);
INSERT INTO transactions VALUES
    (1000, 4.99),
    (1001, 2.89),
    (1002, 3.38),
    (1003, 4.99);
SELECT amount FROM transactions WHERE transaction_id = 1003;


CREATE TABLE transactions(
    transaction_id INT PRIMARY KEY AUTO_INCREMENT,
    amount DECIMAL (5,2)
);
INSERT INTO transactions (amount) VALUES
    (4.99),
    (2.89),
    (3.38),
    (4.99);
ALTER TABLE transactions AUTO_INCREMENT 1000;
DELETE FROM transactions;
INSERT INTO transactions (amount) VALUES
    (4.99),
    (2.89),
    (3.38),
    (4.99);


CREATE TABLE customers (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50),
    last_name VARCHAR(50)
);
INSERT INTO customers VALUES (first_name, last_name) VALUES
    ("Fred","Fish"),
    ("Larry","Lobster"),
    ("Bubble","Bass");
CREATE TABLE transactions(
    transaction_id INT PRIMARY KEY AUTO_INCREMENT,
    amount DECIMAL (5,2),
    customer_id INT,
    FOREIGN KEY(customer_id) REFERENCES customers(customer_id)
);
ALTER TABLE transactions DROP FOREIGN KEY transaction_ibfk_1;
ALTER TABLE transactions ADD CONSTRAINT fk_customer_id FOREIGN KEY(customer_id) REFERENCES customers(customer_id);
ALTER TABLE transactions AUTO_INCREMENT 1000;
INSERT INTO transactions (amount, customer_id) VALUES
    (4.99, 3),
    (2.89, 2),
    (3.38, 3),
    (4.99, 1);


INSERT INTO transactions (amount, customer_id) VALUES
    (1.00, NULL);
INSERT INTO customers (first_name, last_name) VALUES
    ("Poppy", "Puff");
SELECT * FROM transactions INNER JOIN customers
ON transactions.customer_id = customers.customer_id;
SELECT transaction_id, amount, first_name, last_name FROM transactions INNER JOIN customers
ON transactions.customer_id = customers.customer_id;
SELECT * FROM transactions LEFT JOIN customers
ON transactions.customer_id = customers.customer_id;
SELECT * FROM transactions RIGHT JOIN customers
ON transactions.customer_id = customers.customer_id;


SELECT COUNT(amount) FROM transactions;
SELECT COUNT(amount) AS count FROM transactions;
SELECT MAX(amount) AS MAX FROM transactions;
SELECT MIN(amount) AS MIN FROM transactions;
SELECT AVG(amount) AS AVG FROM transactions;
SELECT SUM(amount) AS SUM FROM transactions;
SELECT CONCAT(first_name, " ", last_name) AS full_name FROM employees;


ALTER TABLE employees ADD COLUMN job VARCHAR(25) AFTER pay_rate;
UPDATE employees SET job = "Manager" WHERE employee_id = 1;
UPDATE employees SET job = "Cashier" WHERE employee_id = 2;
UPDATE employees SET job = "Cook" WHERE employee_id = 3;
UPDATE employees SET job = "Cook" WHERE employee_id = 4;
UPDATE employees SET job = "Asst. Manager" WHERE employee_id = 5;
UPDATE employees SET job = "Janitor" WHERE employee_id = 6;
SELECT * FROM employees WHERE hire_date < "2023-01-05" AND job = "Cook";
SELECT * FROM employees WHERE hire_date < "2023-01-05" OR job = "Cook";
SELECT * FROM employees WHERE NOT job = "Cook";
SELECT * FROM employees WHERE NOT job = "Cook" AND NOT "Cashier";
SELECT * FROM employees WHERE hire_date BETWEEN "2023-01-04" AND "2023-01-06";
SELECT * FROM employees WHERE job IN("Cook", "Cashier");


SELECT first_name FROM employees WHERE first_name LIKE "s%";
SELECT * FROM employees WHERE hire_date LIKE "2023%";
SELECT last_name FROM employees WHERE last_name LIKE "%r";
SELECT * FROM employees WHERE job LIKE "_ook";
SELECT * FROM employees WHERE hire_date LIKE "____-01___";
SELECT * FROM employees WHERE hire_date LIKE "_______-02";
SELECT * FROM employees WHERE job LIKE "_a%";


SELECT * FROM employees ORDER BY last_name;
SELECT * FROM employees ORDER BY last_name DESC;
SELECT * FROM employees ORDER BY last_name ASC;
SELECT * FROM transactions ORDER BY amount, customer_id;


SELECT * FROM customers LIMIT 2;
SELECT * FROM customers LIMIT 1,2;


CREATE TABLE income (
    income_name VARCHAR(50),
    amount DECIMAL(10,2)
);
INSERT INTO income VALUES
    ("orders", 1000000),
    ("merch", 50000),
    ("services", 125000);
CREATE TABLE expenses (
    expense_name VARCHAR(50),
    amount DECIMAL(10,2)
);
INSERT INTO expenses VALUES
    ("wages", 250000),
    ("taxes", 50000),
    ("repairs", 15000);
SELECT * FROM income UNION SELECT * FROM expenses;
SELECT first_name, last_name FROM employees UNION SELECT first_name, last_name FROM customers;
SELECT first_name, last_name FROM employees UNION ALL SELECT first_name, last_name FROM customers;

ALTER TABLE customers ADD refferal_id INT;
UPDATE customers SET refferal_id = 1 WHERE customer_id = 2;
UPDATE customers SET refferal_id = 2 WHERE customer_id = 3;
UPDATE customers SET refferal_id = 2 WHERE customer_id = 4;
SELECT * FROM customers AS a INNER JOIN customers AS b ON a.refferal_id = b.customer_id;
SELECT a.customer_id, a.first_name, a.last_name, CONCAT(b.first_name, " ", b.last_name) AS "rebferred_by" 
FROM customers AS a LEFT JOIN customers AS b ON a.refferal_id = b.customer_id;
ALTER TABLE employees ADD supervisor_id INT;
UPDATE employees SET supervisor_id = 5 WHERE employee_id = 2;
UPDATE employees SET supervisor_id = 5 WHERE employee_id = 3;
UPDATE employees SET supervisor_id = 5 WHERE employee_id = 4;
UPDATE employees SET supervisor_id = 1 WHERE employee_id = 5;
SELECT * FROM employees AS a INNER JOIN employees AS b ON a.supervisor_id = b.employee_id;
SELECT a.first_name, a.last_name, CONCAT(b.first_name, " ", b.last_name) AS "supervised_by"  
FROM employees AS a INNER JOIN employees AS b ON a.supervisor_id = b.employee_id;


CREATE VIEW employee_attendance AS SELECT first_name, last_name FROM employees;
SELECT * FROM employee_attendance;
SELECT * FROM employee_attendance ORDER BY last_name;
DROP VIEW employee_attendance;
ALTER TABLE customers ADD COLUMN email VARCHAR(50);
UPDATE customers SET email = "FFish@gmail.com" WHERE customer_id = 1;
UPDATE customers SET email = "LLobster@gmail.com" WHERE customer_id = 2;
UPDATE customers SET email = "BBass@gmail.com" WHERE customer_id = 3;
UPDATE customers SET email = "PPuff@gmail.com" WHERE customer_id = 4;
CREATE VIEW customer_emails AS email FROM customer_emails;
SELECT * FROM customer_emails;


SHOW INDEXES FROM customers;
CREATE INDEX last_name_idx ON customers(last_name);
SELECT * FROM customers WHERE last_name = "Puff";
CREATE INDEX last_name_first_name_idx ON customers(last_name, first_name);
ALTER TABLE customers DROP INDEX last_name_idx;
SELECT * FROM customers WHERE last_name = "Puff" AND "Poppy";


SELECT first_name, pay_rate, (SELECT AVG(pay_rate) FROM employees) FROM employees;
SELECT first_name, pay_rate FROM employees WHERE pay_rate > (SELECT AVG(pay_rate) FROM employees);
SELECT first_name, last_name FROM customers WHERE customer_id IN (SELECT DISTINCT customer_id FROM transactions WHERE customer_id IS NOT NULL);
SELECT first_name, last_name FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM transactions WHERE customer_id IS NOT NULL);

DROP TABLE IF EXISTS transactions;
CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY AUTO_INCREMENT,
    amount DECIMAL(5, 2),
    customer_id INT,
    order_date DATE,
    FOREIGN KEY (customer_id) 
    REFERENCES customers(customer_id)
);
INSERT INTO transactions
VALUES  (1000, 4.99, 3, "2023-01-01"),
  (1001, 2.89, 2, "2023-01-01"),
  (1002, 3.38, 3, "2023-01-02"),
  (1003, 4.99, 1, "2023-01-02"),
  (1004, 1.00, NULL, "2023-01-03"),
  (1005, 2.49, 4, "2023-01-03"),
  (1006, 5.48, NULL, "2023-01-03");      
SELECT SUM(amount), order_date FROM transactions GROUP BY order_date;
SELECT MAX(amount), order_date FROM transactions GROUP BY order_date;
SELECT MIN(amount), order_date FROM transactions GROUP BY order_date;
SELECT AVG(amount), order_date FROM transactions GROUP BY order_date;
SELECT COUNT(amount), order_date FROM transactions GROUP BY order_date;
SELECT SUM(amount), customer_id FROM transactions GROUP BY customer_id;
SELECT MAX(amount), customer_id FROM transactions GROUP BY customer_id;
SELECT MIN(amount), customer_id FROM transactions GROUP BY customer_id;
SELECT AVG(amount), customer_id FROM transactions GROUP BY customer_id;
SELECT COUNT(amount), customer_id FROM transactions GROUP BY customer_id;
SELECT COUNT(amount), customer_id FROM transactions GROUP BY customer_id HAVING COUNT(amount) > 1;
SELECT COUNT(amount), customer_id FROM transactions GROUP BY customer_id HAVING COUNT(amount) > 1 AND customer_id IS NOT NULL;


SELECT SUM(amount), order_date FROM transactions GROUP BY order_date WITH ROLLUP;
SELECT COUNT(transaction_id), order_date FROM transactions GROUP BY order_date WITH ROLLUP;
SELECT COUNT(transaction_id), customer_id FROM transactions GROUP BY customer_id WITH ROLLUP;
SELECT SUM(pay_rate), employee_id FROM employees GROUP BY employee_id WITH ROLLUP;


SET foreign_key_checks = 0;
DELETE FROM customers WHERE customer_id = 4;
SET foreign_key_checks = 1;
INSERT INTO customers VALUES
    (4, "Poppy", "Puff", 2, "PPuff@gmail.com");
CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY AUTO_INCREMENT,
    amount DECIMAL(5, 2),
    customer_id INT,
    order_date DATE,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE SET NULL 
);
ALTER TABLE transactions DROP FOREIGN KEY fk_customer_id;
ALTER TABLE transactions ADD CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE SET NULL;
SELECT * FROM transactions;
ALTER TABLE transactions DROP FOREIGN KEY fk_customer_id;
ALTER TABLE transactions ADD CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE CASCADE;
UPDATE transactions SET customer_id = 4 WHERE transaction_id = 1005;
SELECT * FROM transactions;


DELIMITER $$
CREATE PROCEDURE get_customers()
BEGIN
    SELECT * FROM customers;
END $$
DELIMITER ;

CALL get_customers();
DROP PROCEDURE get_customers;

DELIMITER $$
CREATE PROCEDURE find_customer(IN id INT)  
BEGIN  
 SELECT *
 FROM customers
 WHERE customer_id = id;
END $$
DELIMITER ; 

CALL find_customer(1);
DROP PROCEDURE find_customer;

DELIMITER $$
CREATE PROCEDURE find_customer(IN f_name VARCHAR(50), IN l_name VARCHAR(50))  
BEGIN  
 SELECT *
 FROM customers
 WHERE first_name = f_name AND last_name = l_name;
END $$
DELIMITER ;

CALL find_customer("Larry", "Lobster");
DROP PROCEDURE find_customer;


ALTER TABLE employees ADD COLUMN salary DECIMAL(10,2) AFTER pay_rate;
SELECT * FROM employees;
SHOW TRIGGERS;
CREATE TRIGGER before_hourly_pay_update BEFORE UPDATE ON employees FOR EACH ROW SET NEW.salary = (NEW.pay_rate * 2080);
UPDATE employees SET pay_rate = 50 WHERE employee_id = 1;
UPDATE employees SET pay_rate = pay_rate + 1;
CREATE TRIGGER before_hourly_pay_insert BEFORE INSERT ON employees FOR EACH ROW SET NEW.salary = (NEW.pay_rate * 2080);
INSERT INTO employees VALUES
    (6, "Sheldon", "Plankton", 10, NULL, "Janitor", "2023-01-07", 5);
CREATE TABLE expenses(
    expense_id INT PRIMARY KEY,
    expense_name VARCHAR(50),
    expense_total DECIMAL(10,2)
);
SELECT * FROM expenses;
INSERT INTO expenses VALUES 
    (1, "salaries", 0),
    (2, "supplies", 0),
    (3, "taxes", 0);
UPDATE expenses SET expense_total = (SELECT SUM(salary) FROM employees) WHERE expense_name = "salaries";
CREATE TRIGGER after_salary_delete AFTER DELETE ON employees FOR EACH ROW UPDATE expenses
    SET expense_total = expense_total - OLD.salary WHERE expense_name = "salaries";
DELETE FROM employees WHERE employee_id = 6;
CREATE TRIGGER after_salary_insert AFTER INSERT ON employees FOR EACH ROW UPDATE expenses
    SET expense_total = expense_total + NEW.salary WHERE expense_name = "salaries";
CREATE TRIGGER after_salary_update AFTER UPDATE ON employees FOR EACH ROW UPDATE expenses
    SET expense_total = expense_total + (NEW.salary - OLD.salary) WHERE expense_name = "salaries";
UPDATE employees SET pay_rate = 20 WHERE employee_id = 6;
